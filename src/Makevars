
OTEL_CPP_LIBS =  \
	  cpp/build/exporters/ostream/libopentelemetry_exporter_ostream_span.a \
	  cpp/build/sdk/src/trace/libopentelemetry_trace.a \
	  cpp/build/sdk/src/resource/libopentelemetry_resources.a \
	  cpp/build/sdk/src/common/libopentelemetry_common.a

OBJECTS = init.o tracer-sdk.o tracer-api.o

PKG_CPPFLAGS = -Icpp/api/include -Icpp/sdk/include \
    -Icpp/exporters/ostream/include

# TODO: use -l instead?
PKG_LIBS = $(OTEL_CPP_LIBS)

all: $(SHLIB)

# need static libs before linking
$(SHLIB): $(OTEL_CPP_LIBS)

# need to extract headers before compiling R package
$(OBJECTS): cpp/CMakeLists.txt

cpp/CMakeLists.txt: vendor/opentelemetry-cpp.tgz
	tar xzf vendor/opentelemetry-cpp.tgz --no-same-owner || \
	    tar xzf vendor/opentelemetry-cpp.tgz
	mkdir -p cpp/.git
	(cd cpp; MAKEFLAGS= CC="$(CC)" CXX="$(CXX)" AR="$(AR)" \
     RANLIB="$(RANLIB)" CPPFLAGS="$(CPPFLAGS)" \
     CXXFLAGS="$(CXXFLAGS) $(CXXPICFLAGS)" \
	 CFLAGS="$(CFLAGS) $(CPICFLAGS)" cmake -S . -B build \
	-DBUILD_SHARED_LIBS=OFF -DCMAKE_CXX_STANDARD=14 \
	-DWITH_ELASTICSEARCH=OFF -DWITH_EXAMPLES=OFF \
	-DWITH_OTLP_GRPC=OFF -DWITH_OTLP_HTTP=ON -DWITH_ABSEIL=OFF \
	-DWITH_PROMETHEUS=OFF -DBUILD_TESTING=OFF -DWITH_BENCHMARK=OFF \
	-DWITH_FUNC_TESTS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON)
    # -DProtobuf_INCLUDE_DIR=/opt/R/arm64-bak/include \
    # -DProtobuf_LIBRARIES="-L/opt/R/arm64-bak/lib -lprotobuf" \
    # -DProtobuf_PROTOC_EXECUTABLE=/opt/R/arm64-bak/bin/protoc)
	rm -rf cpp/.git

# need to extract vendored cpp lib before compiling libs
$(OTEL_CPP_LIBS): cpp/CMakeLists.txt
	(cd cpp; MAKEFLAGS= CFLAGS=-fPIC cmake --build build)
